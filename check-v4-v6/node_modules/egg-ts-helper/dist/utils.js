"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TS_CONFIG = exports.JS_CONFIG = void 0;
exports.getEggInfo = getEggInfo;
exports.convertString = convertString;
exports.isIdentifierName = isIdentifierName;
exports.loadFiles = loadFiles;
exports.writeJsConfig = writeJsConfig;
exports.writeTsConfig = writeTsConfig;
exports.checkMaybeIsTsProj = checkMaybeIsTsProj;
exports.checkMaybeIsJsProj = checkMaybeIsJsProj;
exports.loadModules = loadModules;
exports.strToFn = strToFn;
exports.pickFields = pickFields;
exports.log = log;
exports.getImportStr = getImportStr;
exports.writeFileSync = writeFileSync;
exports.cleanJs = cleanJs;
exports.getModuleObjByPath = getModuleObjByPath;
exports.formatPath = formatPath;
exports.toArray = toArray;
exports.removeSameNameJs = removeSameNameJs;
exports.resolveModule = resolveModule;
exports.moduleExist = moduleExist;
exports.requireFile = requireFile;
exports.extend = extend;
exports.parseJson = parseJson;
exports.getPkgInfo = getPkgInfo;
exports.readJson = readJson;
exports.readJson5 = readJson5;
exports.formatProp = formatProp;
exports.camelProp = camelProp;
exports.loadTsConfig = loadTsConfig;
exports.findExportNode = findExportNode;
exports.isClass = isClass;
exports.modifierHas = modifierHas;
exports.cleanEmpty = cleanEmpty;
const fs_1 = __importDefault(require("fs"));
const globby_1 = __importDefault(require("globby"));
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
const yn_1 = __importDefault(require("yn"));
const child_process_1 = require("child_process");
const json5_1 = __importDefault(require("json5"));
const config_1 = require("./config");
exports.JS_CONFIG = {
    include: ['**/*'],
};
exports.TS_CONFIG = {
    compilerOptions: {
        target: typescript_1.default.ScriptTarget.ES2017,
        module: typescript_1.default.ModuleKind.CommonJS,
        strict: true,
        noImplicitAny: false,
        experimentalDecorators: true,
        emitDecoratorMetadata: true,
        allowSyntheticDefaultImports: true,
        allowJs: false,
        pretty: true,
        lib: ['es6'],
        noEmitOnError: false,
        noUnusedLocals: true,
        noUnusedParameters: true,
        allowUnreachableCode: false,
        allowUnusedLabels: false,
        strictPropertyInitialization: false,
        noFallthroughCasesInSwitch: true,
        skipLibCheck: true,
        skipDefaultLibCheck: true,
        inlineSourceMap: true,
    },
};
const cacheEggInfo = {};
function getEggInfo(option) {
    const { cacheIndex, cwd, customLoader } = option;
    const cacheKey = cacheIndex ? `${cacheIndex}${cwd}` : undefined;
    const caches = cacheKey ? (cacheEggInfo[cacheKey] = cacheEggInfo[cacheKey] || {}) : undefined;
    const end = (json) => {
        if (caches) {
            caches.eggInfo = json;
            caches.cacheTime = Date.now();
        }
        if (option.callback) {
            return option.callback(json);
        }
        return json;
    };
    // check cache
    if (caches) {
        if (caches.cacheTime && (Date.now() - caches.cacheTime) < 1000) {
            return end(caches.eggInfo);
        }
        else if (caches.runningPromise) {
            return caches.runningPromise;
        }
    }
    // get egg info from customLoader
    if (customLoader) {
        return end({
            config: customLoader.config,
            plugins: customLoader.plugins,
            eggPaths: customLoader.eggPaths,
        });
    }
    // prepare options
    const cmd = 'node';
    const args = [path_1.default.resolve(__dirname, './scripts/eggInfo')];
    const opt = {
        cwd,
        env: {
            ...process.env,
            TS_NODE_TYPE_CHECK: 'false',
            TS_NODE_TRANSPILE_ONLY: 'true',
            TS_NODE_FILES: 'false',
            EGG_TYPESCRIPT: 'true',
            CACHE_REQUIRE_PATHS_FILE: path_1.default.resolve(config_1.tmpDir, './requirePaths.json'),
            ...option.env,
        },
    };
    if (option.async) {
        // cache promise
        caches.runningPromise = new Promise((resolve, reject) => {
            (0, child_process_1.execFile)(cmd, args, opt, err => {
                caches.runningPromise = null;
                if (err)
                    reject(err);
                resolve(end(parseJson(fs_1.default.readFileSync(config_1.eggInfoPath, 'utf-8'))));
            });
        });
        return caches.runningPromise;
    }
    try {
        (0, child_process_1.execFileSync)(cmd, args, opt);
        return end(parseJson(fs_1.default.readFileSync(config_1.eggInfoPath, 'utf-8')));
    }
    catch (e) {
        return end({});
    }
}
// convert string to same type with default value
function convertString(val, defaultVal) {
    if (val === undefined)
        return defaultVal;
    switch (typeof defaultVal) {
        case 'boolean':
            return (0, yn_1.default)(val, { default: defaultVal });
        case 'number':
            const num = +val;
            return (isNaN(num) ? defaultVal : num);
        case 'string':
            return val;
        default:
            return defaultVal;
    }
}
function isIdentifierName(s) {
    return /^[$A-Z_][0-9A-Z_$]*$/i.test(s);
}
// load ts/js files
function loadFiles(cwd, pattern) {
    pattern = pattern || '**/*.(js|ts)';
    pattern = Array.isArray(pattern) ? pattern : [pattern];
    const fileList = globby_1.default.sync(pattern.concat(['!**/*.d.ts']), { cwd });
    return fileList.filter(f => {
        // filter same name js/ts
        return !(f.endsWith('.js') &&
            fileList.includes(f.substring(0, f.length - 2) + 'ts'));
    });
}
// write jsconfig.json to cwd
function writeJsConfig(cwd) {
    const jsconfigUrl = path_1.default.resolve(cwd, './jsconfig.json');
    if (!fs_1.default.existsSync(jsconfigUrl)) {
        fs_1.default.writeFileSync(jsconfigUrl, JSON.stringify(exports.JS_CONFIG, null, 2));
        return jsconfigUrl;
    }
}
// write tsconfig.json to cwd
function writeTsConfig(cwd) {
    const tsconfigUrl = path_1.default.resolve(cwd, './tsconfig.json');
    if (!fs_1.default.existsSync(tsconfigUrl)) {
        fs_1.default.writeFileSync(tsconfigUrl, JSON.stringify(exports.TS_CONFIG, null, 2));
        return tsconfigUrl;
    }
}
function checkMaybeIsTsProj(cwd, pkgInfo) {
    pkgInfo = pkgInfo || getPkgInfo(cwd);
    return (pkgInfo.egg && pkgInfo.egg.typescript) ||
        fs_1.default.existsSync(path_1.default.resolve(cwd, './tsconfig.json')) ||
        fs_1.default.existsSync(path_1.default.resolve(cwd, './config/config.default.ts')) ||
        fs_1.default.existsSync(path_1.default.resolve(cwd, './config/config.ts'));
}
function checkMaybeIsJsProj(cwd, pkgInfo) {
    pkgInfo = pkgInfo || getPkgInfo(cwd);
    const isJs = !checkMaybeIsTsProj(cwd, pkgInfo) &&
        (fs_1.default.existsSync(path_1.default.resolve(cwd, './config/config.default.js')) ||
            fs_1.default.existsSync(path_1.default.resolve(cwd, './jsconfig.json')));
    return isJs;
}
// load modules to object
function loadModules(cwd, loadDefault, preHandle) {
    const modules = {};
    preHandle = preHandle || (fn => fn);
    fs_1.default
        .readdirSync(cwd)
        .filter(f => f.endsWith('.js'))
        .forEach(f => {
        const name = f.substring(0, f.lastIndexOf('.'));
        const obj = require(path_1.default.resolve(cwd, name));
        if (loadDefault && obj.default) {
            modules[name] = preHandle(obj.default);
        }
        else {
            modules[name] = preHandle(obj);
        }
    });
    return modules;
}
// convert string to function
function strToFn(fn) {
    if (typeof fn === 'string') {
        return (...args) => fn.replace(/{{\s*(\d+)\s*}}/g, (_, index) => args[index]);
    }
    return fn;
}
// pick fields from object
function pickFields(obj, fields) {
    const newObj = {};
    fields.forEach(f => (newObj[f] = obj[f]));
    return newObj;
}
// log
function log(msg, prefix = true) {
    console.info(`${prefix ? '[egg-ts-helper] ' : ''}${msg}`);
}
// get import context
function getImportStr(from, to, moduleName, importStar) {
    const extname = path_1.default.extname(to);
    const toPathWithoutExt = to.substring(0, to.length - extname.length);
    const importPath = path_1.default.relative(from, toPathWithoutExt).replace(/\/|\\/g, '/');
    const isTS = extname === '.ts' || fs_1.default.existsSync(`${toPathWithoutExt}.d.ts`);
    const importStartStr = isTS && importStar ? '* as ' : '';
    const fromStr = isTS ? `from '${importPath}'` : `= require('${importPath}')`;
    return `import ${importStartStr}${moduleName} ${fromStr};`;
}
// write file, using fs.writeFileSync to block io that d.ts can create before egg app started.
function writeFileSync(fileUrl, content) {
    fs_1.default.mkdirSync(path_1.default.dirname(fileUrl), { recursive: true });
    fs_1.default.writeFileSync(fileUrl, content);
}
// clean same name js/ts
function cleanJs(cwd) {
    const fileList = [];
    globby_1.default
        .sync(['**/*.ts', '**/*.tsx', '!**/*.d.ts', '!**/node_modules', '!**/.sff'], { cwd })
        .forEach(f => {
        const jf = removeSameNameJs(path_1.default.resolve(cwd, f));
        if (jf)
            fileList.push(path_1.default.relative(cwd, jf));
    });
    if (fileList.length) {
        console.info('[egg-ts-helper] These file was deleted because the same name ts file was exist!\n');
        console.info('  ' + fileList.join('\n  ') + '\n');
    }
}
// get moduleName by file path
function getModuleObjByPath(f) {
    const props = f.substring(0, f.lastIndexOf('.')).split('/');
    // composing moduleName
    const moduleName = props.map(prop => camelProp(prop, 'upper')).join('');
    return {
        props,
        moduleName,
    };
}
// format path sep to /
function formatPath(str) {
    return str.replace(/\/|\\/g, '/');
}
function toArray(pattern) {
    return pattern ? (Array.isArray(pattern) ? pattern : [pattern]) : [];
}
// remove same name js
function removeSameNameJs(f) {
    if (!f.match(/\.tsx?$/) || f.endsWith('.d.ts')) {
        return;
    }
    const jf = f.replace(/tsx?$/, 'js');
    if (fs_1.default.existsSync(jf)) {
        fs_1.default.unlinkSync(jf);
        return jf;
    }
}
// resolve module
function resolveModule(url) {
    try {
        return require.resolve(url);
    }
    catch (e) {
        return undefined;
    }
}
// check whether module is exist
function moduleExist(mod, cwd) {
    const nodeModulePath = path_1.default.resolve(cwd || process.cwd(), 'node_modules', mod);
    return fs_1.default.existsSync(nodeModulePath) || resolveModule(mod);
}
// require modules
function requireFile(url) {
    url = url && resolveModule(url);
    if (!url) {
        return undefined;
    }
    let exp = require(url);
    if (exp.__esModule && 'default' in exp) {
        exp = exp.default;
    }
    return exp;
}
// extend
function extend(obj, ...args) {
    args.forEach(source => {
        let descriptor, prop;
        if (source) {
            for (prop in source) {
                descriptor = Object.getOwnPropertyDescriptor(source, prop);
                Object.defineProperty(obj, prop, descriptor);
            }
        }
    });
    return obj;
}
// parse json
function parseJson(jsonStr) {
    if (jsonStr) {
        try {
            return JSON.parse(jsonStr);
        }
        catch (e) {
            return {};
        }
    }
    else {
        return {};
    }
}
// load package.json
function getPkgInfo(cwd) {
    return readJson(path_1.default.resolve(cwd, 'package.json'));
}
// read json file
function readJson(jsonUrl) {
    if (!fs_1.default.existsSync(jsonUrl))
        return {};
    return parseJson(fs_1.default.readFileSync(jsonUrl, 'utf-8'));
}
function readJson5(jsonUrl) {
    if (!fs_1.default.existsSync(jsonUrl))
        return {};
    return json5_1.default.parse(fs_1.default.readFileSync(jsonUrl, 'utf-8'));
}
// format property
function formatProp(prop) {
    return prop.replace(/[._-][a-z]/gi, s => s.substring(1).toUpperCase());
}
// like egg-core/file-loader
function camelProp(property, caseStyle) {
    if (typeof caseStyle === 'function') {
        return caseStyle(property);
    }
    // camel transfer
    property = formatProp(property);
    let first = property[0];
    // istanbul ignore next
    switch (caseStyle) {
        case 'lower':
            first = first.toLowerCase();
            break;
        case 'upper':
            first = first.toUpperCase();
            break;
        case 'camel':
            break;
        default:
            break;
    }
    return first + property.substring(1);
}
// load tsconfig.json
function loadTsConfig(tsconfigPath) {
    tsconfigPath = path_1.default.extname(tsconfigPath) === '.json' ? tsconfigPath : `${tsconfigPath}.json`;
    const tsConfig = readJson5(tsconfigPath);
    if (tsConfig.extends) {
        const extendPattern = tsConfig.extends;
        const tsconfigDirName = path_1.default.dirname(tsconfigPath);
        const maybeRealExtendPath = [
            path_1.default.resolve(tsconfigDirName, extendPattern),
            path_1.default.resolve(tsconfigDirName, `${extendPattern}.json`),
        ];
        const isExtendFromNodeModules = !extendPattern.startsWith('.') && !extendPattern.startsWith('/');
        if (isExtendFromNodeModules) {
            const DEFAULT_TS_CONFIG_FILE_NAME = 'tsconfig.json';
            const extendTsConfigPath = !path_1.default.extname(extendPattern) ? DEFAULT_TS_CONFIG_FILE_NAME : '';
            maybeRealExtendPath.push(path_1.default.resolve(tsconfigDirName, 'node_modules', extendPattern, extendTsConfigPath), path_1.default.resolve(process.cwd(), 'node_modules', extendPattern, extendTsConfigPath));
        }
        const extendRealPath = maybeRealExtendPath.find(f => fs_1.default.existsSync(f));
        if (extendRealPath) {
            const extendTsConfig = loadTsConfig(extendRealPath);
            return {
                ...tsConfig.compilerOptions,
                ...extendTsConfig,
            };
        }
    }
    return tsConfig.compilerOptions || {};
}
/**
 * ts ast utils
 */
// find export node from sourcefile.
function findExportNode(code) {
    const sourceFile = typescript_1.default.createSourceFile('file.ts', code, typescript_1.default.ScriptTarget.ES2017, true);
    const cache = new Map();
    const exportNodeList = [];
    let exportDefaultNode;
    sourceFile.statements.forEach(node => {
        // each node in root scope
        if (modifierHas(node, typescript_1.default.SyntaxKind.ExportKeyword)) {
            if (modifierHas(node, typescript_1.default.SyntaxKind.DefaultKeyword)) {
                // export default
                exportDefaultNode = node;
            }
            else {
                // export variable
                if (typescript_1.default.isVariableStatement(node)) {
                    node.declarationList.declarations.forEach(declare => exportNodeList.push(declare));
                }
                else {
                    exportNodeList.push(node);
                }
            }
        }
        else if (typescript_1.default.isVariableStatement(node)) {
            // cache variable statement
            for (const declaration of node.declarationList.declarations) {
                if (typescript_1.default.isIdentifier(declaration.name) && declaration.initializer) {
                    cache.set(declaration.name.escapedText, declaration.initializer);
                }
            }
        }
        else if ((typescript_1.default.isFunctionDeclaration(node) || typescript_1.default.isClassDeclaration(node)) && node.name) {
            // cache function declaration and class declaration
            cache.set(node.name.escapedText, node);
        }
        else if (typescript_1.default.isExportAssignment(node)) {
            // export default {}
            exportDefaultNode = node.expression;
        }
        else if (typescript_1.default.isExpressionStatement(node) && typescript_1.default.isBinaryExpression(node.expression)) {
            if (typescript_1.default.isPropertyAccessExpression(node.expression.left)) {
                const obj = node.expression.left.expression;
                const prop = node.expression.left.name;
                if (typescript_1.default.isIdentifier(obj)) {
                    if (obj.escapedText === 'exports') {
                        // exports.xxx = {}
                        exportNodeList.push(node.expression);
                    }
                    else if (obj.escapedText === 'module' &&
                        typescript_1.default.isIdentifier(prop) &&
                        prop.escapedText === 'exports') {
                        // module.exports = {}
                        exportDefaultNode = node.expression.right;
                    }
                }
            }
            else if (typescript_1.default.isIdentifier(node.expression.left)) {
                // let exportData;
                // exportData = {};
                // export exportData
                cache.set(node.expression.left.escapedText, node.expression.right);
            }
        }
    });
    while (exportDefaultNode && typescript_1.default.isIdentifier(exportDefaultNode) && cache.size) {
        const mid = cache.get(exportDefaultNode.escapedText);
        cache.delete(exportDefaultNode.escapedText);
        exportDefaultNode = mid;
    }
    return {
        exportDefaultNode,
        exportNodeList,
    };
}
function isClass(v) {
    return typeof v === 'function' && /^\s*class\s+/.test(v.toString());
}
// check kind in node.modifiers.
function modifierHas(node, kind) {
    return node.modifiers && node.modifiers.find(mod => kind === mod.kind);
}
function cleanEmpty(data) {
    const clearData = {};
    Object.keys(data).forEach(k => {
        const dataValue = data[k];
        if (dataValue !== undefined && dataValue !== null) {
            clearData[k] = data[k];
        }
    });
    return clearData;
}
//# sourceMappingURL=data:application/json;base64,