{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport { writeFileSync, readFileSync, readdirSync, statSync, copyFileSync, mkdirSync } from 'node:fs'\nimport path from 'node:path'\n\nconst cwd = process.cwd() + path.sep;\n\nconst pkg = JSON.parse(readFileSync(path.join(cwd, 'package.json'), 'utf-8'));\n// make sure commonjs *.d.ts can import types\npkg.types = pkg.exports['.'].require.types;\n\nwriteFileSync('package.json', JSON.stringify(pkg, null, 2) + '\\n')\nwriteFileSync('dist/package.json', JSON.stringify({\n  name: pkg.name,\n  version: pkg.version,\n}, null, 2) + '\\n')\n\n// Replace all `( import.meta.url )` into `('import_meta_url_placeholder_by_tshy_after')` on commonjs.\nconst IMPORT_META_URL = '(' + 'import.meta.url' + ')';\nconst IMPORT_META_URL_PLACE_HOLDER = '(\\'import_meta_url_placeholder_by_tshy_after\\')';\n\n// Replace all `import.meta.resolve (xxx)` into `require.resolve(xxx)` on commonjs.\nconst IMPORT_META_RESOLVE = 'import.meta.resolve' + '(';\nconst IMPORT_META_RESOLVE_PLACE_HOLDER = 'require.resolve(';\n\nfunction replaceImportMetaUrl(baseDir: string) {\n  const names = readdirSync(baseDir);\n  for (const name of names) {\n    const filepath = path.join(baseDir, name);\n    const stat = statSync(filepath);\n    if (stat.isDirectory()) {\n      replaceImportMetaUrl(filepath);\n      continue;\n    }\n    if (!filepath.endsWith('.js')) {\n      continue;\n    }\n\n    let content = readFileSync(filepath, 'utf-8');\n    let changed = false;\n    if (content.includes(IMPORT_META_URL)) {\n      changed = true;\n      content = content.replaceAll(IMPORT_META_URL, IMPORT_META_URL_PLACE_HOLDER);\n      console.log('Auto fix \"import.meta.url\" on %s', filepath.replace(cwd, ''));\n    }\n    if (content.includes(IMPORT_META_RESOLVE)) {\n      changed = true;\n      content = content.replaceAll(IMPORT_META_RESOLVE, IMPORT_META_RESOLVE_PLACE_HOLDER);\n      console.log('Auto fix \"import.meta.resolve\" on %s', filepath.replace(cwd, ''));\n    }\n    if (changed) {\n      writeFileSync(filepath, content);\n    }\n  }\n}\nreplaceImportMetaUrl(path.join(cwd, 'dist/commonjs'));\n\n// Copy image/json/web files\nconst fileExts = [\n  '.jpg', '.jpeg', '.png', '.gif', '.webp', '.ico',\n  '.json', '.html', '.htm', '.css',\n];\nconst sourceDir = path.join(cwd, 'src');\nconst commonjsDir = path.join(cwd, 'dist/commonjs');\nconst esmDir = path.join(cwd, 'dist/esm');\n\nfunction copyFiles(baseDir: string) {\n  const names = readdirSync(baseDir);\n  for (const name of names) {\n    const filepath = path.join(baseDir, name);\n    const stat = statSync(filepath);\n    if (stat.isDirectory()) {\n      copyFiles(filepath);\n      continue;\n    }\n    const extname = path.extname(filepath);\n    if (!fileExts.includes(extname)) {\n      continue;\n    }\n    let targetFilepath = filepath.replace(sourceDir, commonjsDir);\n    mkdirSync(path.dirname(targetFilepath), { recursive: true });\n    copyFileSync(filepath, targetFilepath);\n    console.log('Copy %s to %s', filepath.replace(cwd, ''), targetFilepath.replace(cwd, ''));\n    targetFilepath = filepath.replace(sourceDir, esmDir);\n    mkdirSync(path.dirname(targetFilepath), { recursive: true });\n    copyFileSync(filepath, targetFilepath);\n    console.log('Copy %s to %s', filepath.replace(cwd, ''), targetFilepath.replace(cwd, ''));\n  }\n}\ncopyFiles(sourceDir);\n"]}